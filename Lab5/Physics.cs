using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Lab5
{
    class Physics
    {
        public static void Iterate(double deltaTime, Player[] players)
        {
            for (int i = 0; i < players.Length; i++)
            {
                //Acceleration accumulated based on force generated by vehicle subtracted by drag, which is resultant currentForce, experienced by the same vehicle
                players[i].vehicle.acceleration.x += players[i].vehicle.currentForce.x - players[i].vehicle.drag.x;

                //Updating final velocity due to accelration for next frame
                players[i].vehicle.velocity.x = (int)(players[i].vehicle.velocity.x + players[i].vehicle.acceleration.x * deltaTime);

                //Clamp acceleration to max accelration value
                if (players[i].vehicle.acceleration.x > players[i].vehicle.maxAcceleration.x)
                {
                    players[i].vehicle.acceleration.x = players[i].vehicle.maxAcceleration.x;
                }
                else if (players[i].vehicle.acceleration.x < 0)
                {
                    players[i].vehicle.acceleration.x = 0;
                }

                //Clamp acceleration to max acceleration value
                if (players[i].vehicle.velocity.x > players[i].vehicle.maxVelocity.x)
                {
                    players[i].vehicle.velocity.x = players[i].vehicle.maxVelocity.x;
                }
                else if (players[i].vehicle.velocity.x < 0)
                {
                    players[i].vehicle.velocity.x = 0;
                }

                //Updating position based on equation to solve for distance travelled for a given time, acceleration, and initial velocity
                players[i].vehicle.position.x = (int)(players[i].vehicle.position.x + players[i].vehicle.velocity.x * deltaTime
                    + players[i].vehicle.acceleration.x * 0.5 * deltaTime * deltaTime);
            }
        }
    }
}
